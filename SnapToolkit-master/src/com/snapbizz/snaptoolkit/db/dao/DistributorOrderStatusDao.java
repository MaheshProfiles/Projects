package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.DistributorOrderStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISTRIBUTOR_ORDER_STATUS.
*/
public class DistributorOrderStatusDao extends AbstractDao<DistributorOrderStatus, Long> {

    public static final String TABLENAME = "DISTRIBUTOR_ORDER_STATUS";

    /**
     * Properties of entity DistributorOrderStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DistributorId = new Property(1, Long.class, "distributorId", false, "DISTRIBUTOR_ID");
        public final static Property StatusString = new Property(2, String.class, "statusString", false, "STATUS_STRING");
        public final static Property OrderId = new Property(3, String.class, "orderId", false, "ORDER_ID");
        public final static Property OrderNo = new Property(4, String.class, "orderNo", false, "ORDER_NO");
        public final static Property DeliveryDate = new Property(5, String.class, "deliveryDate", false, "DELIVERY_DATE");
        public final static Property StatusCode = new Property(6, String.class, "statusCode", false, "STATUS_CODE");
        public final static Property OrderSubTotal = new Property(7, Double.class, "orderSubTotal", false, "ORDER_SUB_TOTAL");
        public final static Property AmountToPay = new Property(8, Double.class, "amountToPay", false, "AMOUNT_TO_PAY");
    };


    public DistributorOrderStatusDao(DaoConfig config) {
        super(config);
    }
    
    public DistributorOrderStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISTRIBUTOR_ORDER_STATUS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DISTRIBUTOR_ID' INTEGER," + // 1: distributorId
                "'STATUS_STRING' TEXT," + // 2: statusString
                "'ORDER_ID' TEXT," + // 3: orderId
                "'ORDER_NO' TEXT," + // 4: orderNo
                "'DELIVERY_DATE' TEXT," + // 5: deliveryDate
                "'STATUS_CODE' TEXT," + // 6: statusCode
                "'ORDER_SUB_TOTAL' REAL," + // 7: orderSubTotal
                "'AMOUNT_TO_PAY' REAL);"); // 8: amountToPay
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISTRIBUTOR_ORDER_STATUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistributorOrderStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long distributorId = entity.getDistributorId();
        if (distributorId != null) {
            stmt.bindLong(2, distributorId);
        }
 
        String statusString = entity.getStatusString();
        if (statusString != null) {
            stmt.bindString(3, statusString);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(5, orderNo);
        }
 
        String deliveryDate = entity.getDeliveryDate();
        if (deliveryDate != null) {
            stmt.bindString(6, deliveryDate);
        }
 
        String statusCode = entity.getStatusCode();
        if (statusCode != null) {
            stmt.bindString(7, statusCode);
        }
 
        Double orderSubTotal = entity.getOrderSubTotal();
        if (orderSubTotal != null) {
            stmt.bindDouble(8, orderSubTotal);
        }
 
        Double amountToPay = entity.getAmountToPay();
        if (amountToPay != null) {
            stmt.bindDouble(9, amountToPay);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DistributorOrderStatus readEntity(Cursor cursor, int offset) {
        DistributorOrderStatus entity = new DistributorOrderStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // distributorId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // statusString
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orderNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deliveryDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // statusCode
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // orderSubTotal
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // amountToPay
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistributorOrderStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistributorId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatusString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrderNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeliveryDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatusCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderSubTotal(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAmountToPay(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DistributorOrderStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DistributorOrderStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
