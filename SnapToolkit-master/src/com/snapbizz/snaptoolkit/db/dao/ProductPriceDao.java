package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.ProductPrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_PRICE.
*/
public class ProductPriceDao extends AbstractDao<ProductPrice, Long> {

    public static final String TABLENAME = "PRODUCT_PRICE";

    /**
     * Properties of entity ProductPrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PId = new Property(1, Long.class, "pId", false, "P_ID");
        public final static Property IsGdb = new Property(2, Short.class, "isGdb", false, "IS_GDB");
        public final static Property SalesPrice = new Property(3, Double.class, "salesPrice", false, "SALES_PRICE");
    };


    public ProductPriceDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_PRICE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'P_ID' INTEGER," + // 1: pId
                "'IS_GDB' INTEGER," + // 2: isGdb
                "'SALES_PRICE' REAL);"); // 3: salesPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_PRICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPrice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long pId = entity.getPId();
        if (pId != null) {
            stmt.bindLong(2, pId);
        }
 
        Short isGdb = entity.getIsGdb();
        if (isGdb != null) {
            stmt.bindLong(3, isGdb);
        }
 
        Double salesPrice = entity.getSalesPrice();
        if (salesPrice != null) {
            stmt.bindDouble(4, salesPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductPrice readEntity(Cursor cursor, int offset) {
        ProductPrice entity = new ProductPrice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // pId
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // isGdb
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3) // salesPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPrice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIsGdb(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setSalesPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProductPrice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProductPrice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
