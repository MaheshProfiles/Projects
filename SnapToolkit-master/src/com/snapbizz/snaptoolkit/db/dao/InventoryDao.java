package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Inventory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY".
*/
public class InventoryDao extends AbstractDao<Inventory, Long> {

    public static final String TABLENAME = "INVENTORY";

    /**
     * Properties of entity Inventory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductCode = new Property(0, long.class, "productCode", true, "PRODUCT_CODE");
        public final static Property Quantity = new Property(1, int.class, "quantity", false, "QUANTITY");
        public final static Property MinimumBaseQuantity = new Property(2, Integer.class, "minimumBaseQuantity", false, "MINIMUM_BASE_QUANTITY");
        public final static Property ReOrderPoint = new Property(3, Integer.class, "reOrderPoint", false, "RE_ORDER_POINT");
        public final static Property IsDeleted = new Property(4, boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(6, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public InventoryDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY\" (" + //
                "\"PRODUCT_CODE\" INTEGER PRIMARY KEY NOT NULL ," + // 0: productCode
                "\"QUANTITY\" INTEGER NOT NULL ," + // 1: quantity
                "\"MINIMUM_BASE_QUANTITY\" INTEGER," + // 2: minimumBaseQuantity
                "\"RE_ORDER_POINT\" INTEGER," + // 3: reOrderPoint
                "\"IS_DELETED\" INTEGER NOT NULL ," + // 4: isDeleted
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 5: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 6: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Inventory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductCode());
        stmt.bindLong(2, entity.getQuantity());
 
        Integer minimumBaseQuantity = entity.getMinimumBaseQuantity();
        if (minimumBaseQuantity != null) {
            stmt.bindLong(3, minimumBaseQuantity);
        }
 
        Integer reOrderPoint = entity.getReOrderPoint();
        if (reOrderPoint != null) {
            stmt.bindLong(4, reOrderPoint);
        }
        stmt.bindLong(5, entity.getIsDeleted() ? 1L: 0L);
        stmt.bindLong(6, entity.getCreatedAt().getTime());
        stmt.bindLong(7, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Inventory readEntity(Cursor cursor, int offset) {
        Inventory entity = new Inventory( //
            cursor.getLong(offset + 0), // productCode
            cursor.getInt(offset + 1), // quantity
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // minimumBaseQuantity
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // reOrderPoint
            cursor.getShort(offset + 4) != 0, // isDeleted
            new java.util.Date(cursor.getLong(offset + 5)), // createdAt
            new java.util.Date(cursor.getLong(offset + 6)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Inventory entity, int offset) {
        entity.setProductCode(cursor.getLong(offset + 0));
        entity.setQuantity(cursor.getInt(offset + 1));
        entity.setMinimumBaseQuantity(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setReOrderPoint(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsDeleted(cursor.getShort(offset + 4) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Inventory entity, long rowId) {
        entity.setProductCode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Inventory entity) {
        if(entity != null) {
            return entity.getProductCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
