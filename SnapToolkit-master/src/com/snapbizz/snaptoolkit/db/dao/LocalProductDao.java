package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.LocalProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCAL_PRODUCT.
*/
public class LocalProductDao extends AbstractDao<LocalProduct, Long> {

    public static final String TABLENAME = "LOCAL_PRODUCT";

    /**
     * Properties of entity LocalProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Barcode = new Property(1, Long.class, "barcode", false, "BARCODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property BrandId = new Property(4, Integer.class, "brandId", false, "BRAND_ID");
        public final static Property SubCategoryId = new Property(5, Integer.class, "subCategoryId", false, "SUB_CATEGORY_ID");
        public final static Property Uom = new Property(6, String.class, "uom", false, "UOM");
        public final static Property Measure = new Property(7, Double.class, "measure", false, "MEASURE");
        public final static Property Mrp = new Property(8, Double.class, "mrp", false, "MRP");
        public final static Property Vat = new Property(9, Double.class, "vat", false, "VAT");
        public final static Property IsQuickaddProduct = new Property(10, Short.class, "isQuickaddProduct", false, "IS_QUICKADD_PRODUCT");
        public final static Property TransName = new Property(11, String.class, "transName", false, "TRANS_NAME");
        public final static Property TransDesc = new Property(12, String.class, "transDesc", false, "TRANS_DESC");
        public final static Property CreatedAt = new Property(13, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public LocalProductDao(DaoConfig config) {
        super(config);
    }
    
    public LocalProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_PRODUCT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BARCODE' INTEGER," + // 1: barcode
                "'NAME' TEXT," + // 2: name
                "'DESCRIPTION' TEXT," + // 3: description
                "'BRAND_ID' INTEGER," + // 4: brandId
                "'SUB_CATEGORY_ID' INTEGER," + // 5: subCategoryId
                "'UOM' TEXT," + // 6: uom
                "'MEASURE' REAL," + // 7: measure
                "'MRP' REAL," + // 8: mrp
                "'VAT' REAL," + // 9: vat
                "'IS_QUICKADD_PRODUCT' INTEGER," + // 10: isQuickaddProduct
                "'TRANS_NAME' TEXT," + // 11: transName
                "'TRANS_DESC' TEXT," + // 12: transDesc
                "'CREATED_AT' INTEGER NOT NULL ," + // 13: createdAt
                "'UPDATED_AT' INTEGER NOT NULL );"); // 14: updatedAt
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_LOCAL_PRODUCT_BARCODE ON LOCAL_PRODUCT" +
                " (BARCODE);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindLong(2, barcode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Integer brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindLong(5, brandId);
        }
 
        Integer subCategoryId = entity.getSubCategoryId();
        if (subCategoryId != null) {
            stmt.bindLong(6, subCategoryId);
        }
 
        String uom = entity.getUom();
        if (uom != null) {
            stmt.bindString(7, uom);
        }
 
        Double measure = entity.getMeasure();
        if (measure != null) {
            stmt.bindDouble(8, measure);
        }
 
        Double mrp = entity.getMrp();
        if (mrp != null) {
            stmt.bindDouble(9, mrp);
        }
 
        Double vat = entity.getVat();
        if (vat != null) {
            stmt.bindDouble(10, vat);
        }
 
        Short isQuickaddProduct = entity.getIsQuickaddProduct();
        if (isQuickaddProduct != null) {
            stmt.bindLong(11, isQuickaddProduct);
        }
 
        String transName = entity.getTransName();
        if (transName != null) {
            stmt.bindString(12, transName);
        }
 
        String transDesc = entity.getTransDesc();
        if (transDesc != null) {
            stmt.bindString(13, transDesc);
        }
        stmt.bindLong(14, entity.getCreatedAt().getTime());
        stmt.bindLong(15, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalProduct readEntity(Cursor cursor, int offset) {
        LocalProduct entity = new LocalProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // barcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // brandId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // subCategoryId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uom
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // measure
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // mrp
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // vat
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10), // isQuickaddProduct
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // transName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // transDesc
            new java.util.Date(cursor.getLong(offset + 13)), // createdAt
            new java.util.Date(cursor.getLong(offset + 14)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalProduct entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarcode(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrandId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSubCategoryId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMeasure(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMrp(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setVat(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setIsQuickaddProduct(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10));
        entity.setTransName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTransDesc(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalProduct entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalProduct entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
