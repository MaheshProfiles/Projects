package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.DistributorPayments;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRIBUTOR_PAYMENTS".
*/
public class DistributorPaymentsDao extends AbstractDao<DistributorPayments, Long> {

    public static final String TABLENAME = "DISTRIBUTOR_PAYMENTS";

    /**
     * Properties of entity DistributorPayments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoNumber = new Property(1, Long.class, "poNumber", false, "PO_NUMBER");
        public final static Property Amount = new Property(2, Integer.class, "amount", false, "AMOUNT");
        public final static Property Mode = new Property(3, String.class, "mode", false, "MODE");
        public final static Property Reference = new Property(4, String.class, "reference", false, "REFERENCE");
        public final static Property IsDisabled = new Property(5, boolean.class, "isDisabled", false, "IS_DISABLED");
        public final static Property CreatedAt = new Property(6, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(7, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public DistributorPaymentsDao(DaoConfig config) {
        super(config);
    }
    
    public DistributorPaymentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRIBUTOR_PAYMENTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PO_NUMBER\" INTEGER," + // 1: poNumber
                "\"AMOUNT\" INTEGER," + // 2: amount
                "\"MODE\" TEXT NOT NULL ," + // 3: mode
                "\"REFERENCE\" TEXT," + // 4: reference
                "\"IS_DISABLED\" INTEGER NOT NULL ," + // 5: isDisabled
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 6: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 7: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRIBUTOR_PAYMENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistributorPayments entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long poNumber = entity.getPoNumber();
        if (poNumber != null) {
            stmt.bindLong(2, poNumber);
        }
 
        Integer amount = entity.getAmount();
        if (amount != null) {
            stmt.bindLong(3, amount);
        }
        stmt.bindString(4, entity.getMode());
 
        String reference = entity.getReference();
        if (reference != null) {
            stmt.bindString(5, reference);
        }
        stmt.bindLong(6, entity.getIsDisabled() ? 1L: 0L);
        stmt.bindLong(7, entity.getCreatedAt().getTime());
        stmt.bindLong(8, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DistributorPayments readEntity(Cursor cursor, int offset) {
        DistributorPayments entity = new DistributorPayments( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // poNumber
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // amount
            cursor.getString(offset + 3), // mode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // reference
            cursor.getShort(offset + 5) != 0, // isDisabled
            new java.util.Date(cursor.getLong(offset + 6)), // createdAt
            new java.util.Date(cursor.getLong(offset + 7)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistributorPayments entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoNumber(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAmount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMode(cursor.getString(offset + 3));
        entity.setReference(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsDisabled(cursor.getShort(offset + 5) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DistributorPayments entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DistributorPayments entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
