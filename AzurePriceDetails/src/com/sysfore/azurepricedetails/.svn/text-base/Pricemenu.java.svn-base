package com.sysfore.azurepricedetails;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.Toast;

import com.sysfore.azurepricedetails.modal.AzureUtil;
import com.sysfore.azurepricedetails.modal.DataProcess;
import com.sysfore.azurepricedetails.model.BillingPojo;
import com.sysfore.azurepricedetails.model.CalculationPojo;
import com.sysfore.azurepricedetails.model.ProcessLog;
import com.sysfore.azurepricedetails.model.ResultPojo;
import com.sysfore.azurepricedetails.model.ServicePojo;
import com.sysfore.azurepricedetails.model.Subscription;
import com.sysfore.azurepricedetails.service.BillingService;
import com.sysfore.azurepricedetails.sqlite.helper.DatabaseHelper;

public class Pricemenu extends FragmentActivity implements OnClickListener,
		OnCheckedChangeListener {

	private static final int REQUEST_PATH = 1;
	private static final int REQUEST_PICK_FILE = 1;
	public static final String MYPREFS = "mySharedPreferences";
	int mode = Activity.MODE_PRIVATE;
	private File selectedFile;

	List<Subscription> subcription;
	Button browsepricesheet, monthplus, monthminus, yearplus, yearminus,
			calculate;
	TextView month, year, filename;
	CheckBox forcedchecked;
	int nStartmonth = 1;
	int nEndmonth = 12;
	long count;
	int login_id, curent, current, currentDay, currentMonth, currentYear;
	int nStartyear = 2011;
	int nEndyear = 2014;
	ProcessLog processlog;
	int chkvalue;
	DatabaseHelper db;
	String tokenId,subcriptionID, path, usagesumary, enrollmentId, token, selectedPath,
			subscriptionname, filename1, filename2, targetedfile, selectfile,
			date;

	@Override
	protected void onCreate(Bundle arg0) {
		// TODO Auto-generated method stub
		super.onCreate(arg0);
		setContentView(R.layout.price_menu);
		db = new DatabaseHelper(this);
		processlog = new ProcessLog();
		browsepricesheet = (Button) findViewById(R.id.pricesheet);
		browsepricesheet.setOnClickListener(this);
		monthplus = (Button) findViewById(R.id.monthplus);
		monthplus.setOnClickListener(this);
		monthminus = (Button) findViewById(R.id.monthminus);
		monthminus.setOnClickListener(this);
		yearplus = (Button) findViewById(R.id.yearplus);
		yearplus.setOnClickListener(this);
		yearminus = (Button) findViewById(R.id.yearminus);
		yearminus.setOnClickListener(this);
		calculate = (Button) findViewById(R.id.calculate);
		calculate.setOnClickListener(this);
		month = (TextView) findViewById(R.id.month);
		year = (TextView) findViewById(R.id.year);
		forcedchecked = (CheckBox) findViewById(R.id.forcedcheck);
		forcedchecked.setOnCheckedChangeListener(this);

		filename = (TextView) findViewById(R.id.filename);

		Typeface face = Typeface.createFromAsset(getAssets(),
				"HelveNeuUltLig.ttf");

		month.setTypeface(face);
		year.setTypeface(face);

		date = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
		Calendar localCalendar = Calendar.getInstance(TimeZone.getDefault());
		currentDay = localCalendar.get(Calendar.DATE);
		Log.d("currentDay********************", "" + currentDay);
		currentMonth = localCalendar.get(Calendar.MONTH) + 1;
		Log.d("currentMonth********************", "" + currentMonth);
		currentYear = localCalendar.get(Calendar.YEAR);
		Log.d("currentYear********************", "" + currentYear);
		month.setText("06");
		year.setText("2014");
		loadpreferences();
		getSubscriptionDetails();
		getActionBar();

	}

	/**
	 * Retrieving Login id Preferences
	 */
	private void loadpreferences() {
		// TODO Auto-generated method stub
		SharedPreferences mySharedPreferences = getSharedPreferences(MYPREFS,
				mode);
		login_id = mySharedPreferences.getInt("login_id", 0);
		Log.d("login_id", "" + login_id);

	}

	/**
	 * Getting SubscriptionDetails
	 */
	private void getSubscriptionDetails() {
		// TODO Auto-generated method stub
		subcription = db.getAllSubcription(Integer.toString(login_id));
		for (int i = 0; i < subcription.size(); i++) {
			usagesumary = subcription.get(i).getUsagesummary();
			enrollmentId = AzureUtil.decrypt(subcription.get(i)
					.getEmplomentID());
			// Log.d("enrollmentId*********", enrollmentId);
			token = AzureUtil.decrypt(subcription.get(i).getToken());
			// Log.d("token*********", token);

			if (usagesumary != null) {
				File sourceFile = new File(usagesumary);
				selectfile = sourceFile.getName();
				filename.setText(selectfile);
				selectedPath = usagesumary;

			} else {
				filename.setText("Filename");
			}
		}
	}

	/**
	 * Button On click
	 */
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		String getmonth = String.valueOf(month.getText());
		int curent = Integer.parseInt(getmonth);

		String getyear = String.valueOf(year.getText());
		int current = Integer.parseInt(getyear);
		switch (v.getId()) {

		case R.id.pricesheet:
			Intent intent1 = new Intent(Pricemenu.this, Filepicker.class);
			startActivityForResult(intent1, REQUEST_PATH);

			break;

		case R.id.monthplus:

			if (curent < nEndmonth) {
				curent++;
				if (curent < 10)
					month.setText("0" + Integer.toString(curent++));
				else
					month.setText(Integer.toString(curent++));
				Log.d("month*****************", "" + month.getText());

			}

			break;

		case R.id.monthminus:

			if (curent > nStartmonth) {
				curent--;
				if (curent < 10)
					month.setText("0" + Integer.toString(curent));
				else
					month.setText(Integer.toString(curent));

			}

			break;

		case R.id.yearplus:

			if (current < nEndyear) {
				current++;
				year.setText(Integer.toString(current++));
				Log.d("month*****************", "" + year.getText().length());
			}

			break;

		case R.id.yearminus:

			if (current > nStartyear) {
				current--;
				year.setText(Integer.toString(current));
			}

			break;

		case R.id.calculate:

			if (chkvalue == 1) {
				processBilling();

			} else {

				processBilling();

			}

			break;

		default:
			break;
		}

	}

	/**
	 * Price sheet validating and check for data
	 */
	private void processBilling() {
		// TODO Auto-generated method stub
		Log.d("Inside process billing***********************",
				"Process billing");
		if (filename.getText().equals("Filename")) {

			Toast.makeText(getApplicationContext(),
					"Please browse Price sheet", Toast.LENGTH_SHORT).show();

		}

		else {
			AlertDialog.Builder alert = new AlertDialog.Builder(Pricemenu.this);
			alert.setTitle("Confirmation");

			alert.setIcon(R.drawable.helpic);
			if (selectedFile != null) {
				alert.setMessage("Do you want to continue with "
						+ selectedFile.getName());
			} else {
				alert.setMessage("Do you want to continue with " + selectfile);
			}
			alert.setPositiveButton("Yes",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
							NetworkInfo netInfo = cm.getActiveNetworkInfo();
							File sourceFile = new File(selectedPath);
							targetedfile = sourceFile.getName();
							Log.d("targetedfile***********************",
									targetedfile.toString());
							try {
								copyDirectoryOneLocationToAnotherLocation(
										sourceFile, targetedfile);
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}

							// path = selectedFile.getAbsolutePath();
							path = selectedPath;
							int dot = path.lastIndexOf(".");

							String ext = path.substring(dot + 1);

							if (ext.equals("xls")) {

								Subscription subscription = new Subscription();
								subscription.setCreatedby(Integer
										.toString(login_id));
								subscription.setSubcriptionId(tokenId);
								// subscription.setUsagesummary(targetedfile);
								subscription.setUsagesummary(selectedPath);
								long upstatus = db
										.updateSubscription(subscription);

								if (upstatus == 0) {
									Toast.makeText(getApplicationContext(),
											"Update fail", Toast.LENGTH_SHORT)
											.show();
								}/*
								 * else {
								 * 
								 * //Toast.makeText(getApplicationContext(),
								 * "Updated Successfully"
								 * ,Toast.LENGTH_SHORT).show();
								 * 
								 * }
								 */

								getSubscriptionDetails();

								processlog.setToken(AzureUtil.encrypt(token));
								processlog.setMonthyear(month.getText()
										.toString()
										+ "-"
										+ year.getText().toString());
								processlog.setLastprocess(date);
								db.createProcessLog(processlog);

								count = db.getPriceDetailcount(month.getText()
										.toString(), year.getText().toString(),
										tokenId);
								Log.d("count********************", "" + count);

								if (chkvalue == 1 && count >= 0) {
									db.clearPricedetails(month.getText()
											.toString(), year.getText()
											.toString(), tokenId,
											login_id);
									if (netInfo != null
											&& netInfo
													.isConnectedOrConnecting()) {

										/*
										 * Toast.makeText(Dashbaord.this,
										 * "  Internet Connected",
										 * Toast.LENGTH_LONG).show();
										 */
										new PriceDetailDownload().execute();

									}

									else {

										Toast.makeText(
												Pricemenu.this,
												"No internet connectivity Please try later",
												Toast.LENGTH_LONG).show();
									}

									processlog.setToken(AzureUtil
											.encrypt(token));
									processlog.setMonthyear(month.getText()
											.toString()
											+ "-"
											+ year.getText().toString());
									processlog.setLastprocess(date);
									db.createProcessLog(processlog);

								} else {

									if (Integer.parseInt(month.getText()
											.toString()) == currentMonth) {
										// Toast.makeText(getApplicationContext(),"true",
										// Toast.LENGTH_SHORT).show();

										String processedLog1 = db
												.getProcessLog(AzureUtil
														.encrypt(token), month
														.getText().toString()
														+ "-"
														+ year.getText()
																.toString());
										String[] parts = processedLog1
												.split("-");
										String day = parts[0];
										String mnth = parts[1];
										String yearr = parts[2];
										Log.d("process log111111111111********************",
												"" + processedLog1);

										if (Integer.parseInt(day) == currentDay) {

											count = db.getPriceDetailcount(
													month.getText().toString(),
													year.getText().toString(),
													tokenId);
											Log.d("count********************",
													"" + count);

											if (count == 0) {
												db.clearPricedetails(month
														.getText().toString(),
														year.getText()
																.toString(),
														tokenId, login_id);
												if (netInfo != null
														&& netInfo
																.isConnectedOrConnecting()) {

													/*
													 * Toast.makeText(Dashbaord.this
													 * , "  Internet Connected",
													 * Toast
													 * .LENGTH_LONG).show();
													 */
													new PriceDetailDownload()
															.execute();

												}

												else {

													Toast.makeText(
															Pricemenu.this,
															"No internet connectivity Please try later",
															Toast.LENGTH_LONG)
															.show();
												}
												processlog.setToken(AzureUtil
														.encrypt(token));
												processlog.setMonthyear(month
														.getText().toString()
														+ "-"
														+ year.getText()
																.toString());
												processlog.setLastprocess(date);
												db.createProcessLog(processlog);

											} else {
												Intent pricedetail = new Intent(
														Pricemenu.this,
														PriceDetails.class);
												pricedetail.putExtra(
														"PRICEDETAIL",
														"pricedetail");
												pricedetail.putExtra("Month",
														month.getText()
																.toString());
												pricedetail.putExtra("Year",
														year.getText()
																.toString());
												startActivity(pricedetail);

											}
										}
									}

									else {

										if (Integer.parseInt(month.getText()
												.toString()) < currentMonth) {
											// Toast.makeText(getApplicationContext(),"true lesser",Toast.LENGTH_SHORT).show();

											String processedLog1 = db.getProcessLog(
													AzureUtil.encrypt(token),
													month.getText().toString()
															+ "-"
															+ year.getText()
																	.toString());
											String[] parts = processedLog1
													.split("-");
											String day = parts[0];
											String mnth = parts[1];
											String yearr = parts[2];
											Log.d("process log111111111111********************",
													"" + processedLog1);
											if (Integer.parseInt(mnth) > Integer
													.parseInt(month.getText()
															.toString())) {
												count = db.getPriceDetailcount(
														month.getText()
																.toString(),
														year.getText()
																.toString(),
														tokenId);
												Log.d("count in second if********************",
														"" + count);

												if (count == 0) {
													db.clearPricedetails(month
															.getText()
															.toString(), year
															.getText()
															.toString(),
															tokenId,
															login_id);
													if (netInfo != null
															&& netInfo
																	.isConnectedOrConnecting()) {

														/*
														 * Toast.makeText(Dashbaord
														 * .this,
														 * "  Internet Connected"
														 * ,
														 * Toast.LENGTH_LONG).show
														 * ();
														 */
														new PriceDetailDownload()
																.execute();

													}

													else {

														Toast.makeText(
																Pricemenu.this,
																"No internet connectivity Please try later",
																Toast.LENGTH_LONG)
																.show();
													}
													processlog.setToken(AzureUtil
															.encrypt(token));
													processlog
															.setMonthyear(month
																	.getText()
																	.toString()
																	+ "-"
																	+ year.getText()
																			.toString());
													processlog
															.setLastprocess(date);
													db.createProcessLog(processlog);

												} else {
													Intent pricedetail = new Intent(
															Pricemenu.this,
															PriceDetails.class);
													pricedetail.putExtra(
															"PRICEDETAIL1",
															"pricedetail1");
													pricedetail
															.putExtra(
																	"Month",
																	month.getText()
																			.toString());
													pricedetail
															.putExtra(
																	"Year",
																	year.getText()
																			.toString());
													startActivity(pricedetail);

												}

											}

										} else {
											Toast.makeText(
													getApplicationContext(),
													"No data",
													Toast.LENGTH_SHORT).show();
										}

									}
								}

							}

							else {
								Toast.makeText(
										getApplicationContext(),
										"Please select correct file to proceed",
										Toast.LENGTH_SHORT).show();
							}

						}
					});

			alert.setNegativeButton("No",
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							// TODO Auto-generated method stub
							dialog.cancel();
						}
					});
			alert.show();

		}
	}

	/**
	 * On back click
	 */
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		super.onBackPressed();
		Intent back = new Intent(Pricemenu.this, Pricemenu.class);
		back.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		startActivity(back);
	}

	/**
	 * Write File
	 */
	public void copyDirectoryOneLocationToAnotherLocation(File sourceLocation,
			String targetFile) throws IOException {

		try {
			InputStream in = new FileInputStream(sourceLocation);

			FileOutputStream fos;
			fos = openFileOutput(targetFile, Context.MODE_PRIVATE);

			// Copy the bits from instream to outstream
			byte[] buf = new byte[1024];
			int len;
			while ((len = in.read(buf)) > 0) {
				fos.write(buf, 0, len);
			}
			in.close();
			fos.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Browse for files
	 */
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {

		if (resultCode == Activity.RESULT_OK) {

			switch (requestCode) {

			case REQUEST_PICK_FILE:

				if (data.hasExtra(Filepicker.EXTRA_FILE_PATH)) {

					selectedFile = new File(
							data.getStringExtra(Filepicker.EXTRA_FILE_PATH));

					selectedPath = selectedFile.getAbsolutePath();
					Log.d("selectedPath***********************", ""
							+ selectedPath);
					filename.setText(selectedFile.getName());
					Log.d("filename***********************",
							"" + selectedFile.getName());
				}
				break;
			}
		}
	}

	/**
	 * Perform Background operations
	 */
	public class PriceDetailDownload extends AsyncTask<Void, String, Void>
			implements OnCancelListener {
		ProgressHUD mProgressHUD;

		@Override
		protected void onPreExecute() {
			mProgressHUD = ProgressHUD.show(Pricemenu.this, "Connecting", true,
					true, this);
			super.onPreExecute();
		}

		@Override
		protected Void doInBackground(Void... params) {
			try {
				publishProgress("Connecting");
				Thread.sleep(2000);
				publishProgress("Processing");
				Thread.sleep(5000);
				//billing();
				billingDetails();

				publishProgress("Done");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onProgressUpdate(String... values) {
			mProgressHUD.setMessage(values[0]);
			super.onProgressUpdate(values);
		}

		@Override
		protected void onPostExecute(Void result) {

			mProgressHUD.dismiss();

			super.onPostExecute(result);
		}

		@Override
		public void onCancel(DialogInterface dialog) {
			this.cancel(true);
			mProgressHUD.dismiss();
		}
	}

	/**
	 * Create menus
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.login, menu);
		return true;
	}

	/**
	 * On menu selected
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {

		case R.id.accounts:
			Intent sub = new Intent(Pricemenu.this, SubscriptionActivity.class);
			startActivity(sub);
			return true;
		case R.id.changepassword:
			Intent changepassword = new Intent(Pricemenu.this,
					ChangePassword.class);
			startActivity(changepassword);
			return true;
		case R.id.action_logout:
			Intent home1 = new Intent(Pricemenu.this, LoginActivity.class);
			startActivity(home1);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/**
	 * Calling the web services
	 */
	public void billing() {
		Log.d("billing function start", "billing function");

		Map<String, ServicePojo> servicePojoMap = new HashMap<String, ServicePojo>();
		try {

			InputStream fis = openFileInput(targetedfile);
			Log.d("billing function", "billing function");
			Workbook wb = Workbook.getWorkbook(fis);
			Sheet ws = wb.getSheet(1);

			int rowNum = ws.getRows() + 1;
			int colNum = 7;

			for (int j = 7; j < ws.getRows(); j++) {
				ServicePojo servicePojo = new ServicePojo();

				for (int i = 0; i < ws.getColumns(); i++) {
					Cell cell = ws.getCell(i, j);
					if (i == 0) {
						servicePojo.setService(cell.getContents());
					} else if (i == 1) {
						servicePojo.setUnitOfMeasure(cell.getContents());
					} else if (i == 3) {
						servicePojo.setCommitmentUnitPrice(cell.getContents());
					} else if (i == 6) {
						servicePojo.setCommitmentDiscount(cell.getContents());
					}
				}

				servicePojoMap.put(servicePojo.getService(), servicePojo);

			}

		} catch (Exception e) {
			// e.printStackTrace();
		}

		List<ResultPojo> resultList = new ArrayList<ResultPojo>();
		BillingService billingService = new BillingService();
		Map<String, List<BillingPojo>> pojoMap = billingService.getBillDetails(
				enrollmentId, token, month.getText().toString(), year.getText()
						.toString());

		DecimalFormat df = new DecimalFormat("#,###,##0.00");
		for (String key : pojoMap.keySet()) {
			DataProcess dataProcess = new DataProcess();
			List<BillingPojo> billingPojoList = pojoMap.get(key);
			subscriptionname = billingPojoList.get(0).getSubscriptionName();
			Map<String, List<BillingPojo>> billingPojoMap = dataProcess
					.processServiceResources(billingPojoList);
			Map<String, List<CalculationPojo>> calculationPojoMap = dataProcess
					.calculateAzureUsage(billingPojoMap);
			for (String resourceKey : calculationPojoMap.keySet()) {
				List<CalculationPojo> calculationList = calculationPojoMap
						.get(resourceKey);
				for (CalculationPojo cpj : calculationList) {
					ServicePojo service = servicePojoMap.get(cpj.getProduct());

					String sum = "0";
					try {
						String split[] = (service.getUnitOfMeasure()).split(
								" ", 2);
						sum = split[0].replace(",", "");
						BigDecimal calculate = new BigDecimal("" + cpj.getSum());
						ResultPojo result = new ResultPojo();
						result.setProduct(AzureUtil.encrypt(cpj.getProduct()));
						result.setPerUnitCommitted(service
								.getCommitmentUnitPrice());

						result.setUnitConsumed("" + df.format(cpj.getSum()));
						result.setUnitofMeasure(service.getUnitOfMeasure());
						if (!service.getCommitmentUnitPrice().equals("0.0")) {
							BigDecimal value = calculate.divide(
									new BigDecimal(sum)).multiply(
									new BigDecimal(service
											.getCommitmentUnitPrice()));
							if (cpj.getProduct().equalsIgnoreCase(
									"Storage Transactions")) {
								result.setBillTotal(""
										+ df.format(value.doubleValue() * 10000));
							} else {
								result.setBillTotal(""
										+ df.format(value.doubleValue()));
							}
						} else {
							result.setBillTotal("0.00");
						}
						// resultList.add(result);

						result.setMonth(month.getText().toString());
						result.setYear(year.getText().toString());
						result.setCreatedby(Integer.toString(login_id));
						result.setSubcriptionId(AzureUtil.encrypt(key.replace("\"", "")));
						result.setSubcriptionName(AzureUtil.encrypt((subscriptionname)));
						db.createPriceDetail(result);

					} catch (Exception e) {

					}

				}
			}

		}
		Intent pricedetail = new Intent(Pricemenu.this, PriceDetails.class);
		pricedetail.putExtra("Month", month.getText().toString());
		pricedetail.putExtra("Year", year.getText().toString());

		startActivity(pricedetail);
	}

	/**
	 * Calling the web services
	 */
	public void billingDetails() {
		Log.d("billing Details function start", "billing Details function");

		Map<String, ServicePojo> servicePojoMap = new HashMap<String, ServicePojo>();
		try {

			InputStream fis = openFileInput(targetedfile);
			Log.d("billing function", "billing function");
			Workbook wb = Workbook.getWorkbook(fis);
			Sheet ws = wb.getSheet(1);

			int rowNum = ws.getRows() + 1;
			int colNum = 7;

			for (int j = 7; j < ws.getRows(); j++) {
				ServicePojo servicePojo = new ServicePojo();

				for (int i = 0; i < ws.getColumns(); i++) {
					Cell cell = ws.getCell(i, j);
					if (i == 0) {
						servicePojo.setService(cell.getContents());
					} else if (i == 1) {
						servicePojo.setUnitOfMeasure(cell.getContents());
					} else if (i == 3) {
						servicePojo.setCommitmentUnitPrice(cell.getContents());
					} else if (i == 6) {
						servicePojo.setCommitmentDiscount(cell.getContents());
					}
				}

				servicePojoMap.put(servicePojo.getService(), servicePojo);

			}

		} catch (Exception e) {
			// e.printStackTrace();
		}

		BillingService billingService = new BillingService();
		Map<String, List<BillingPojo>> pojoMap = billingService
				.getComponentBillDetails(enrollmentId, token, month.getText()
						.toString(), year.getText().toString());

		DecimalFormat df = new DecimalFormat("#,###,##0.00");

		// Map<String, List<CalculationPojo>> calculationFinal = new
		// HashMap<String, List<CalculationPojo>>();
		Map<String, List<ResultPojo>> resultFinal = new HashMap<String, List<ResultPojo>>();
		for (String key : pojoMap.keySet()) {

			List<ResultPojo> resultList = new ArrayList<ResultPojo>();

			DataProcess dataProcess = new DataProcess();
			List<BillingPojo> billingPojoList = pojoMap.get(key);
			subscriptionname = billingPojoList.get(0).getSubscriptionName();
			subcriptionID = billingPojoList.get(0).getSubscriptionGUID().replace("\"", "");
			// if(billingPojoList != null &&
			// billingPojoList.get(0).getServiceInfo().equalsIgnoreCase("\"Compute\"")
			// ) {
			System.out
					.println("---------------------------------KEY-----------------------"
							+ key);
			Map<String, List<BillingPojo>> pojoMapExtract = new HashMap<String, List<BillingPojo>>();
			pojoMapExtract.put(key, billingPojoList);
			Map<String, List<CalculationPojo>> calculationPojoMap = dataProcess
					.calculateAzureComponentUsage(pojoMapExtract);
			for (String resourceKey : calculationPojoMap.keySet()) {
				List<CalculationPojo> calculationList = calculationPojoMap
						.get(resourceKey);
				for (CalculationPojo cpj : calculationList) {
					// System.out.println(cpj);
					ServicePojo service = servicePojoMap.get(cpj.getProduct());
					String sum = "0";
					try {
						// System.out.println(service);
						String split[] = (service.getUnitOfMeasure()).split(" ", 2);
						sum = split[0].replace(",", "");
						
						BigDecimal calculate = new BigDecimal("" + cpj.getSum());
						// System.out.println("SUM "+cpj.getSum());
						// System.out.println("UNIT OF MEASURE "+sum);
						// System.out.println("Commitment "+service.getCommitmentUnitPrice());
						ResultPojo result = new ResultPojo();
						result.setProduct(cpj.getProduct());
						result.setComponent(cpj.getComponent().replace("\"", ""));
						result.setPerUnitCommitted(service.getCommitmentUnitPrice());
						result.setUnitConsumed("" +df.format( cpj.getSum()));
					
					
						
						result.setUnitofMeasure(service.getUnitOfMeasure());
						if (!service.getCommitmentUnitPrice().equals("0.0")) {
							BigDecimal value = calculate.divide(
									new BigDecimal(sum)).multiply(
									new BigDecimal(service.getCommitmentUnitPrice()));
							if (cpj.getProduct().equalsIgnoreCase("Storage Transactions")) {
								result.setBillTotal(""+ (df.format(value.doubleValue() * 10000)).replace(",", ""));
							
							} else {
								result.setBillTotal(""+ (df.format(value.doubleValue())).replace(",", ""));
							}
							
						} else {
							result.setBillTotal("0.00");
						}
						
					
						resultList.add(result);
						result.setMonth(month.getText().toString());
						result.setYear(year.getText().toString());
						result.setCreatedby(Integer.toString(login_id));
						result.setSubcriptionId(subcriptionID);
						result.setSubcriptionName(subscriptionname);
						db.createbillingPriceDetail(result);

					} catch (Exception e) {
						// e.printStackTrace();
						// e.printStackTrace();
					}

				}

				resultFinal.put(key, resultList);
			}
			System.out
					.println("---------------------------------KEY ENDS-----------------------");

		}
		
		Intent pricedetail = new Intent(Pricemenu.this, PriceDetails.class);
		pricedetail.putExtra("Month", month.getText().toString());
		pricedetail.putExtra("Year", year.getText().toString());

		startActivity(pricedetail);
	}

	/**
	 * Checkbox Clicked
	 */
	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		// TODO Auto-generated method stub
		if (isChecked) {
			chkvalue = 1;
		} else {
			chkvalue = 0;
		}
	}

}
