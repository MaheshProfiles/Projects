package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.ProductCategories;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_CATEGORIES.
*/
public class ProductCategoriesDao extends AbstractDao<ProductCategories, Integer> {

    public static final String TABLENAME = "PRODUCT_CATEGORIES";

    /**
     * Properties of entity ProductCategories.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ParentId = new Property(2, Integer.class, "parentId", false, "PARENT_ID");
        public final static Property VatId = new Property(3, Integer.class, "vatId", false, "VAT_ID");
        public final static Property IsQuickAdd = new Property(4, Boolean.class, "isQuickAdd", false, "IS_QUICK_ADD");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(6, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ProductCategoriesDao(DaoConfig config) {
        super(config);
    }
    
    public ProductCategoriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_CATEGORIES' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'PARENT_ID' INTEGER," + // 2: parentId
                "'VAT_ID' INTEGER," + // 3: vatId
                "'IS_QUICK_ADD' INTEGER," + // 4: isQuickAdd
                "'CREATED_AT' INTEGER NOT NULL ," + // 5: createdAt
                "'UPDATED_AT' INTEGER NOT NULL );"); // 6: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_CATEGORIES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductCategories entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(3, parentId);
        }
 
        Integer vatId = entity.getVatId();
        if (vatId != null) {
            stmt.bindLong(4, vatId);
        }
 
        Boolean isQuickAdd = entity.getIsQuickAdd();
        if (isQuickAdd != null) {
            stmt.bindLong(5, isQuickAdd ? 1l: 0l);
        }
        stmt.bindLong(6, entity.getCreatedAt().getTime());
        stmt.bindLong(7, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductCategories readEntity(Cursor cursor, int offset) {
        ProductCategories entity = new ProductCategories( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // parentId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // vatId
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isQuickAdd
            new java.util.Date(cursor.getLong(offset + 5)), // createdAt
            new java.util.Date(cursor.getLong(offset + 6)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductCategories entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setParentId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setVatId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsQuickAdd(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductCategories entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductCategories entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
