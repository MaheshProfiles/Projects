package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.PurchaseOrderDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_ORDER_DETAILS".
*/
public class PurchaseOrderDetailsDao extends AbstractDao<PurchaseOrderDetails, Long> {

    public static final String TABLENAME = "PURCHASE_ORDER_DETAILS";

    /**
     * Properties of entity PurchaseOrderDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoNumber = new Property(1, int.class, "poNumber", false, "PO_NUMBER");
        public final static Property TotalAmount = new Property(2, int.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property Discount = new Property(3, int.class, "discount", false, "DISCOUNT");
        public final static Property VatAmount = new Property(4, int.class, "vatAmount", false, "VAT_AMOUNT");
        public final static Property VatRate = new Property(5, float.class, "vatRate", false, "VAT_RATE");
        public final static Property Mrp = new Property(6, int.class, "mrp", false, "MRP");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Uom = new Property(8, String.class, "uom", false, "UOM");
        public final static Property Measure = new Property(9, int.class, "measure", false, "MEASURE");
        public final static Property OrderedQuantity = new Property(10, int.class, "orderedQuantity", false, "ORDERED_QUANTITY");
        public final static Property AcceptedQuantity = new Property(11, int.class, "acceptedQuantity", false, "ACCEPTED_QUANTITY");
        public final static Property ReceivedQuantity = new Property(12, int.class, "receivedQuantity", false, "RECEIVED_QUANTITY");
        public final static Property ReturnedQuantity = new Property(13, int.class, "returnedQuantity", false, "RETURNED_QUANTITY");
        public final static Property PickedupQuantity = new Property(14, int.class, "pickedupQuantity", false, "PICKEDUP_QUANTITY");
        public final static Property ProductCode = new Property(15, long.class, "productCode", false, "PRODUCT_CODE");
        public final static Property PurchasePrice = new Property(16, int.class, "purchasePrice", false, "PURCHASE_PRICE");
        public final static Property CreatedAt = new Property(17, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(18, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public PurchaseOrderDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseOrderDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_ORDER_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PO_NUMBER\" INTEGER NOT NULL ," + // 1: poNumber
                "\"TOTAL_AMOUNT\" INTEGER NOT NULL ," + // 2: totalAmount
                "\"DISCOUNT\" INTEGER NOT NULL ," + // 3: discount
                "\"VAT_AMOUNT\" INTEGER NOT NULL ," + // 4: vatAmount
                "\"VAT_RATE\" REAL NOT NULL ," + // 5: vatRate
                "\"MRP\" INTEGER NOT NULL ," + // 6: mrp
                "\"NAME\" TEXT NOT NULL ," + // 7: name
                "\"UOM\" TEXT NOT NULL ," + // 8: uom
                "\"MEASURE\" INTEGER NOT NULL ," + // 9: measure
                "\"ORDERED_QUANTITY\" INTEGER NOT NULL ," + // 10: orderedQuantity
                "\"ACCEPTED_QUANTITY\" INTEGER NOT NULL ," + // 11: acceptedQuantity
                "\"RECEIVED_QUANTITY\" INTEGER NOT NULL ," + // 12: receivedQuantity
                "\"RETURNED_QUANTITY\" INTEGER NOT NULL ," + // 13: returnedQuantity
                "\"PICKEDUP_QUANTITY\" INTEGER NOT NULL ," + // 14: pickedupQuantity
                "\"PRODUCT_CODE\" INTEGER NOT NULL ," + // 15: productCode
                "\"PURCHASE_PRICE\" INTEGER NOT NULL ," + // 16: purchasePrice
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 17: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 18: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_ORDER_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PurchaseOrderDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPoNumber());
        stmt.bindLong(3, entity.getTotalAmount());
        stmt.bindLong(4, entity.getDiscount());
        stmt.bindLong(5, entity.getVatAmount());
        stmt.bindDouble(6, entity.getVatRate());
        stmt.bindLong(7, entity.getMrp());
        stmt.bindString(8, entity.getName());
        stmt.bindString(9, entity.getUom());
        stmt.bindLong(10, entity.getMeasure());
        stmt.bindLong(11, entity.getOrderedQuantity());
        stmt.bindLong(12, entity.getAcceptedQuantity());
        stmt.bindLong(13, entity.getReceivedQuantity());
        stmt.bindLong(14, entity.getReturnedQuantity());
        stmt.bindLong(15, entity.getPickedupQuantity());
        stmt.bindLong(16, entity.getProductCode());
        stmt.bindLong(17, entity.getPurchasePrice());
        stmt.bindLong(18, entity.getCreatedAt().getTime());
        stmt.bindLong(19, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PurchaseOrderDetails readEntity(Cursor cursor, int offset) {
        PurchaseOrderDetails entity = new PurchaseOrderDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // poNumber
            cursor.getInt(offset + 2), // totalAmount
            cursor.getInt(offset + 3), // discount
            cursor.getInt(offset + 4), // vatAmount
            cursor.getFloat(offset + 5), // vatRate
            cursor.getInt(offset + 6), // mrp
            cursor.getString(offset + 7), // name
            cursor.getString(offset + 8), // uom
            cursor.getInt(offset + 9), // measure
            cursor.getInt(offset + 10), // orderedQuantity
            cursor.getInt(offset + 11), // acceptedQuantity
            cursor.getInt(offset + 12), // receivedQuantity
            cursor.getInt(offset + 13), // returnedQuantity
            cursor.getInt(offset + 14), // pickedupQuantity
            cursor.getLong(offset + 15), // productCode
            cursor.getInt(offset + 16), // purchasePrice
            new java.util.Date(cursor.getLong(offset + 17)), // createdAt
            new java.util.Date(cursor.getLong(offset + 18)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PurchaseOrderDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoNumber(cursor.getInt(offset + 1));
        entity.setTotalAmount(cursor.getInt(offset + 2));
        entity.setDiscount(cursor.getInt(offset + 3));
        entity.setVatAmount(cursor.getInt(offset + 4));
        entity.setVatRate(cursor.getFloat(offset + 5));
        entity.setMrp(cursor.getInt(offset + 6));
        entity.setName(cursor.getString(offset + 7));
        entity.setUom(cursor.getString(offset + 8));
        entity.setMeasure(cursor.getInt(offset + 9));
        entity.setOrderedQuantity(cursor.getInt(offset + 10));
        entity.setAcceptedQuantity(cursor.getInt(offset + 11));
        entity.setReceivedQuantity(cursor.getInt(offset + 12));
        entity.setReturnedQuantity(cursor.getInt(offset + 13));
        entity.setPickedupQuantity(cursor.getInt(offset + 14));
        entity.setProductCode(cursor.getLong(offset + 15));
        entity.setPurchasePrice(cursor.getInt(offset + 16));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 17)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 18)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PurchaseOrderDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PurchaseOrderDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
