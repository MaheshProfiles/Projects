package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Transactions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTIONS".
*/
public class TransactionsDao extends AbstractDao<Transactions, Long> {

    public static final String TABLENAME = "TRANSACTIONS";

    /**
     * Properties of entity Transactions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InvoiceId = new Property(1, Long.class, "invoiceId", false, "INVOICE_ID");
        public final static Property PaymentType = new Property(2, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property PaymentMode = new Property(3, String.class, "paymentMode", false, "PAYMENT_MODE");
        public final static Property PaymentReference = new Property(4, String.class, "paymentReference", false, "PAYMENT_REFERENCE");
        public final static Property Amount = new Property(5, int.class, "amount", false, "AMOUNT");
        public final static Property RemainingAmount = new Property(6, int.class, "remainingAmount", false, "REMAINING_AMOUNT");
        public final static Property CustomerPhone = new Property(7, Long.class, "customerPhone", false, "CUSTOMER_PHONE");
        public final static Property ParentTransactionId = new Property(8, Long.class, "parentTransactionId", false, "PARENT_TRANSACTION_ID");
        public final static Property IsSync = new Property(9, boolean.class, "isSync", false, "IS_SYNC");
        public final static Property IsUpdated = new Property(10, boolean.class, "isUpdated", false, "IS_UPDATED");
        public final static Property CreatedAt = new Property(11, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(12, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public TransactionsDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INVOICE_ID\" INTEGER," + // 1: invoiceId
                "\"PAYMENT_TYPE\" TEXT NOT NULL ," + // 2: paymentType
                "\"PAYMENT_MODE\" TEXT NOT NULL ," + // 3: paymentMode
                "\"PAYMENT_REFERENCE\" TEXT," + // 4: paymentReference
                "\"AMOUNT\" INTEGER NOT NULL ," + // 5: amount
                "\"REMAINING_AMOUNT\" INTEGER NOT NULL ," + // 6: remainingAmount
                "\"CUSTOMER_PHONE\" INTEGER," + // 7: customerPhone
                "\"PARENT_TRANSACTION_ID\" INTEGER," + // 8: parentTransactionId
                "\"IS_SYNC\" INTEGER NOT NULL ," + // 9: isSync
                "\"IS_UPDATED\" INTEGER NOT NULL ," + // 10: isUpdated
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 11: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 12: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTIONS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transactions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long invoiceId = entity.getInvoiceId();
        if (invoiceId != null) {
            stmt.bindLong(2, invoiceId);
        }
        stmt.bindString(3, entity.getPaymentType());
        stmt.bindString(4, entity.getPaymentMode());
 
        String paymentReference = entity.getPaymentReference();
        if (paymentReference != null) {
            stmt.bindString(5, paymentReference);
        }
        stmt.bindLong(6, entity.getAmount());
        stmt.bindLong(7, entity.getRemainingAmount());
 
        Long customerPhone = entity.getCustomerPhone();
        if (customerPhone != null) {
            stmt.bindLong(8, customerPhone);
        }
 
        Long parentTransactionId = entity.getParentTransactionId();
        if (parentTransactionId != null) {
            stmt.bindLong(9, parentTransactionId);
        }
        stmt.bindLong(10, entity.getIsSync() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsUpdated() ? 1L: 0L);
        stmt.bindLong(12, entity.getCreatedAt().getTime());
        stmt.bindLong(13, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transactions readEntity(Cursor cursor, int offset) {
        Transactions entity = new Transactions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // invoiceId
            cursor.getString(offset + 2), // paymentType
            cursor.getString(offset + 3), // paymentMode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // paymentReference
            cursor.getInt(offset + 5), // amount
            cursor.getInt(offset + 6), // remainingAmount
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // customerPhone
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // parentTransactionId
            cursor.getShort(offset + 9) != 0, // isSync
            cursor.getShort(offset + 10) != 0, // isUpdated
            new java.util.Date(cursor.getLong(offset + 11)), // createdAt
            new java.util.Date(cursor.getLong(offset + 12)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transactions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInvoiceId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPaymentType(cursor.getString(offset + 2));
        entity.setPaymentMode(cursor.getString(offset + 3));
        entity.setPaymentReference(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.getInt(offset + 5));
        entity.setRemainingAmount(cursor.getInt(offset + 6));
        entity.setCustomerPhone(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setParentTransactionId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsSync(cursor.getShort(offset + 9) != 0);
        entity.setIsUpdated(cursor.getShort(offset + 10) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 12)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transactions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transactions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
