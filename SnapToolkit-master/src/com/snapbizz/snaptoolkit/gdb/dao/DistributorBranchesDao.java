package com.snapbizz.snaptoolkit.gdb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.gdb.dao.DistributorBranches;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRIBUTOR_BRANCHES".
*/
public class DistributorBranchesDao extends AbstractDao<DistributorBranches, Long> {

    public static final String TABLENAME = "DISTRIBUTOR_BRANCHES";

    /**
     * Properties of entity DistributorBranches.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Phone = new Property(0, long.class, "phone", true, "PHONE");
        public final static Property ParentPhone = new Property(1, long.class, "parentPhone", false, "PARENT_PHONE");
        public final static Property AlternatePhones = new Property(2, String.class, "alternatePhones", false, "ALTERNATE_PHONES");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Tin = new Property(5, long.class, "tin", false, "TIN");
        public final static Property City = new Property(6, String.class, "city", false, "CITY");
        public final static Property DeliveryPincodes = new Property(7, String.class, "deliveryPincodes", false, "DELIVERY_PINCODES");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property CreatedAt = new Property(9, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(10, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public DistributorBranchesDao(DaoConfig config) {
        super(config);
    }
    
    public DistributorBranchesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRIBUTOR_BRANCHES\" (" + //
                "\"PHONE\" INTEGER PRIMARY KEY NOT NULL ," + // 0: phone
                "\"PARENT_PHONE\" INTEGER NOT NULL ," + // 1: parentPhone
                "\"ALTERNATE_PHONES\" TEXT," + // 2: alternatePhones
                "\"ADDRESS\" TEXT NOT NULL ," + // 3: address
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"TIN\" INTEGER NOT NULL ," + // 5: tin
                "\"CITY\" TEXT NOT NULL ," + // 6: city
                "\"DELIVERY_PINCODES\" TEXT NOT NULL ," + // 7: deliveryPincodes
                "\"EMAIL\" TEXT," + // 8: email
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 9: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 10: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRIBUTOR_BRANCHES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistributorBranches entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhone());
        stmt.bindLong(2, entity.getParentPhone());
 
        String alternatePhones = entity.getAlternatePhones();
        if (alternatePhones != null) {
            stmt.bindString(3, alternatePhones);
        }
        stmt.bindString(4, entity.getAddress());
        stmt.bindString(5, entity.getName());
        stmt.bindLong(6, entity.getTin());
        stmt.bindString(7, entity.getCity());
        stmt.bindString(8, entity.getDeliveryPincodes());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
        stmt.bindLong(10, entity.getCreatedAt().getTime());
        stmt.bindLong(11, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DistributorBranches readEntity(Cursor cursor, int offset) {
        DistributorBranches entity = new DistributorBranches( //
            cursor.getLong(offset + 0), // phone
            cursor.getLong(offset + 1), // parentPhone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alternatePhones
            cursor.getString(offset + 3), // address
            cursor.getString(offset + 4), // name
            cursor.getLong(offset + 5), // tin
            cursor.getString(offset + 6), // city
            cursor.getString(offset + 7), // deliveryPincodes
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            new java.util.Date(cursor.getLong(offset + 9)), // createdAt
            new java.util.Date(cursor.getLong(offset + 10)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistributorBranches entity, int offset) {
        entity.setPhone(cursor.getLong(offset + 0));
        entity.setParentPhone(cursor.getLong(offset + 1));
        entity.setAlternatePhones(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setTin(cursor.getLong(offset + 5));
        entity.setCity(cursor.getString(offset + 6));
        entity.setDeliveryPincodes(cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DistributorBranches entity, long rowId) {
        entity.setPhone(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DistributorBranches entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
