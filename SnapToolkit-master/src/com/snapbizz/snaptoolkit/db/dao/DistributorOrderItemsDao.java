package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.DistributorOrderItems;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DISTRIBUTOR_ORDER_ITEMS.
*/
public class DistributorOrderItemsDao extends AbstractDao<DistributorOrderItems, Long> {

    public static final String TABLENAME = "DISTRIBUTOR_ORDER_ITEMS";

    /**
     * Properties of entity DistributorOrderItems.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DistributorOrderId = new Property(1, Long.class, "distributorOrderId", false, "DISTRIBUTOR_ORDER_ID");
        public final static Property Sku = new Property(2, Long.class, "sku", false, "SKU");
        public final static Property OrderedQ = new Property(3, Integer.class, "orderedQ", false, "ORDERED_Q");
        public final static Property AcceptedQ = new Property(4, Integer.class, "acceptedQ", false, "ACCEPTED_Q");
        public final static Property Mrp = new Property(5, Double.class, "mrp", false, "MRP");
        public final static Property Price = new Property(6, Double.class, "price", false, "PRICE");
    };


    public DistributorOrderItemsDao(DaoConfig config) {
        super(config);
    }
    
    public DistributorOrderItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DISTRIBUTOR_ORDER_ITEMS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DISTRIBUTOR_ORDER_ID' INTEGER," + // 1: distributorOrderId
                "'SKU' INTEGER," + // 2: sku
                "'ORDERED_Q' INTEGER," + // 3: orderedQ
                "'ACCEPTED_Q' INTEGER," + // 4: acceptedQ
                "'MRP' REAL," + // 5: mrp
                "'PRICE' REAL);"); // 6: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DISTRIBUTOR_ORDER_ITEMS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistributorOrderItems entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long distributorOrderId = entity.getDistributorOrderId();
        if (distributorOrderId != null) {
            stmt.bindLong(2, distributorOrderId);
        }
 
        Long sku = entity.getSku();
        if (sku != null) {
            stmt.bindLong(3, sku);
        }
 
        Integer orderedQ = entity.getOrderedQ();
        if (orderedQ != null) {
            stmt.bindLong(4, orderedQ);
        }
 
        Integer acceptedQ = entity.getAcceptedQ();
        if (acceptedQ != null) {
            stmt.bindLong(5, acceptedQ);
        }
 
        Double mrp = entity.getMrp();
        if (mrp != null) {
            stmt.bindDouble(6, mrp);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(7, price);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DistributorOrderItems readEntity(Cursor cursor, int offset) {
        DistributorOrderItems entity = new DistributorOrderItems( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // distributorOrderId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sku
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderedQ
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // acceptedQ
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // mrp
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistributorOrderItems entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistributorOrderId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSku(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOrderedQ(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAcceptedQ(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMrp(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DistributorOrderItems entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DistributorOrderItems entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
