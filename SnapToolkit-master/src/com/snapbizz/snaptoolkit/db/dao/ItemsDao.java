package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Items;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEMS".
*/
public class ItemsDao extends AbstractDao<Items, Long> {

    public static final String TABLENAME = "ITEMS";

    /**
     * Properties of entity Items.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InvoiceId = new Property(1, long.class, "invoiceId", false, "INVOICE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ProductCode = new Property(3, long.class, "productCode", false, "PRODUCT_CODE");
        public final static Property Uom = new Property(4, String.class, "uom", false, "UOM");
        public final static Property Measure = new Property(5, int.class, "measure", false, "MEASURE");
        public final static Property Quantity = new Property(6, int.class, "quantity", false, "QUANTITY");
        public final static Property Mrp = new Property(7, int.class, "mrp", false, "MRP");
        public final static Property SalePrice = new Property(8, int.class, "salePrice", false, "SALE_PRICE");
        public final static Property VatRate = new Property(9, float.class, "vatRate", false, "VAT_RATE");
        public final static Property VatAmount = new Property(10, int.class, "vatAmount", false, "VAT_AMOUNT");
        public final static Property Savings = new Property(11, int.class, "savings", false, "SAVINGS");
        public final static Property TotalAmount = new Property(12, int.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property PackSize = new Property(13, int.class, "packSize", false, "PACK_SIZE");
        public final static Property CreatedAt = new Property(14, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(15, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ItemsDao(DaoConfig config) {
        super(config);
    }
    
    public ItemsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INVOICE_ID\" INTEGER NOT NULL ," + // 1: invoiceId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"PRODUCT_CODE\" INTEGER NOT NULL ," + // 3: productCode
                "\"UOM\" TEXT NOT NULL ," + // 4: uom
                "\"MEASURE\" INTEGER NOT NULL ," + // 5: measure
                "\"QUANTITY\" INTEGER NOT NULL ," + // 6: quantity
                "\"MRP\" INTEGER NOT NULL ," + // 7: mrp
                "\"SALE_PRICE\" INTEGER NOT NULL ," + // 8: salePrice
                "\"VAT_RATE\" REAL NOT NULL ," + // 9: vatRate
                "\"VAT_AMOUNT\" INTEGER NOT NULL ," + // 10: vatAmount
                "\"SAVINGS\" INTEGER NOT NULL ," + // 11: savings
                "\"TOTAL_AMOUNT\" INTEGER NOT NULL ," + // 12: totalAmount
                "\"PACK_SIZE\" INTEGER NOT NULL ," + // 13: packSize
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 14: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 15: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEMS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Items entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getInvoiceId());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getProductCode());
        stmt.bindString(5, entity.getUom());
        stmt.bindLong(6, entity.getMeasure());
        stmt.bindLong(7, entity.getQuantity());
        stmt.bindLong(8, entity.getMrp());
        stmt.bindLong(9, entity.getSalePrice());
        stmt.bindDouble(10, entity.getVatRate());
        stmt.bindLong(11, entity.getVatAmount());
        stmt.bindLong(12, entity.getSavings());
        stmt.bindLong(13, entity.getTotalAmount());
        stmt.bindLong(14, entity.getPackSize());
        stmt.bindLong(15, entity.getCreatedAt().getTime());
        stmt.bindLong(16, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Items readEntity(Cursor cursor, int offset) {
        Items entity = new Items( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // invoiceId
            cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // productCode
            cursor.getString(offset + 4), // uom
            cursor.getInt(offset + 5), // measure
            cursor.getInt(offset + 6), // quantity
            cursor.getInt(offset + 7), // mrp
            cursor.getInt(offset + 8), // salePrice
            cursor.getFloat(offset + 9), // vatRate
            cursor.getInt(offset + 10), // vatAmount
            cursor.getInt(offset + 11), // savings
            cursor.getInt(offset + 12), // totalAmount
            cursor.getInt(offset + 13), // packSize
            new java.util.Date(cursor.getLong(offset + 14)), // createdAt
            new java.util.Date(cursor.getLong(offset + 15)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Items entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInvoiceId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setProductCode(cursor.getLong(offset + 3));
        entity.setUom(cursor.getString(offset + 4));
        entity.setMeasure(cursor.getInt(offset + 5));
        entity.setQuantity(cursor.getInt(offset + 6));
        entity.setMrp(cursor.getInt(offset + 7));
        entity.setSalePrice(cursor.getInt(offset + 8));
        entity.setVatRate(cursor.getFloat(offset + 9));
        entity.setVatAmount(cursor.getInt(offset + 10));
        entity.setSavings(cursor.getInt(offset + 11));
        entity.setTotalAmount(cursor.getInt(offset + 12));
        entity.setPackSize(cursor.getInt(offset + 13));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 15)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Items entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Items entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
