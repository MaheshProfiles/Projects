package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Orders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDERS.
*/
public class OrdersDao extends AbstractDao<Orders, Integer> {

    public static final String TABLENAME = "ORDERS";

    /**
     * Properties of entity Orders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PoNumber = new Property(0, Integer.class, "poNumber", true, "PO_NUMBER");
        public final static Property DistributorPhone = new Property(1, Long.class, "distributorPhone", false, "DISTRIBUTOR_PHONE");
        public final static Property TotalAmount = new Property(2, Integer.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property DistributorInvoiceNo = new Property(3, Integer.class, "distributorInvoiceNo", false, "DISTRIBUTOR_INVOICE_NO");
        public final static Property TotalDiscount = new Property(4, Integer.class, "totalDiscount", false, "TOTAL_DISCOUNT");
        public final static Property PendingAmount = new Property(5, Integer.class, "pendingAmount", false, "PENDING_AMOUNT");
        public final static Property TotalQuantity = new Property(6, Integer.class, "totalQuantity", false, "TOTAL_QUANTITY");
        public final static Property TotalItems = new Property(7, Integer.class, "totalItems", false, "TOTAL_ITEMS");
        public final static Property TotalVat = new Property(8, Integer.class, "totalVat", false, "TOTAL_VAT");
        public final static Property IsDeleted = new Property(9, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property IsMemo = new Property(10, Boolean.class, "isMemo", false, "IS_MEMO");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property OrderDate = new Property(12, java.util.Date.class, "orderDate", false, "ORDER_DATE");
        public final static Property CreatedAt = new Property(13, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public OrdersDao(DaoConfig config) {
        super(config);
    }
    
    public OrdersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
                "'PO_NUMBER' INTEGER PRIMARY KEY ," + // 0: poNumber
                "'DISTRIBUTOR_PHONE' INTEGER," + // 1: distributorPhone
                "'TOTAL_AMOUNT' INTEGER," + // 2: totalAmount
                "'DISTRIBUTOR_INVOICE_NO' INTEGER," + // 3: distributorInvoiceNo
                "'TOTAL_DISCOUNT' INTEGER," + // 4: totalDiscount
                "'PENDING_AMOUNT' INTEGER," + // 5: pendingAmount
                "'TOTAL_QUANTITY' INTEGER," + // 6: totalQuantity
                "'TOTAL_ITEMS' INTEGER," + // 7: totalItems
                "'TOTAL_VAT' INTEGER," + // 8: totalVat
                "'IS_DELETED' INTEGER," + // 9: isDeleted
                "'IS_MEMO' INTEGER," + // 10: isMemo
                "'STATUS' TEXT," + // 11: status
                "'ORDER_DATE' INTEGER NOT NULL ," + // 12: orderDate
                "'CREATED_AT' INTEGER NOT NULL ," + // 13: createdAt
                "'UPDATED_AT' INTEGER NOT NULL );"); // 14: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Orders entity) {
        stmt.clearBindings();
 
        Integer poNumber = entity.getPoNumber();
        if (poNumber != null) {
            stmt.bindLong(1, poNumber);
        }
 
        Long distributorPhone = entity.getDistributorPhone();
        if (distributorPhone != null) {
            stmt.bindLong(2, distributorPhone);
        }
 
        Integer totalAmount = entity.getTotalAmount();
        if (totalAmount != null) {
            stmt.bindLong(3, totalAmount);
        }
 
        Integer distributorInvoiceNo = entity.getDistributorInvoiceNo();
        if (distributorInvoiceNo != null) {
            stmt.bindLong(4, distributorInvoiceNo);
        }
 
        Integer totalDiscount = entity.getTotalDiscount();
        if (totalDiscount != null) {
            stmt.bindLong(5, totalDiscount);
        }
 
        Integer pendingAmount = entity.getPendingAmount();
        if (pendingAmount != null) {
            stmt.bindLong(6, pendingAmount);
        }
 
        Integer totalQuantity = entity.getTotalQuantity();
        if (totalQuantity != null) {
            stmt.bindLong(7, totalQuantity);
        }
 
        Integer totalItems = entity.getTotalItems();
        if (totalItems != null) {
            stmt.bindLong(8, totalItems);
        }
 
        Integer totalVat = entity.getTotalVat();
        if (totalVat != null) {
            stmt.bindLong(9, totalVat);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(10, isDeleted ? 1l: 0l);
        }
 
        Boolean isMemo = entity.getIsMemo();
        if (isMemo != null) {
            stmt.bindLong(11, isMemo ? 1l: 0l);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
        stmt.bindLong(13, entity.getOrderDate().getTime());
        stmt.bindLong(14, entity.getCreatedAt().getTime());
        stmt.bindLong(15, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Orders readEntity(Cursor cursor, int offset) {
        Orders entity = new Orders( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // poNumber
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // distributorPhone
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // totalAmount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // distributorInvoiceNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // totalDiscount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pendingAmount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // totalQuantity
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // totalItems
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // totalVat
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isDeleted
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isMemo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            new java.util.Date(cursor.getLong(offset + 12)), // orderDate
            new java.util.Date(cursor.getLong(offset + 13)), // createdAt
            new java.util.Date(cursor.getLong(offset + 14)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Orders entity, int offset) {
        entity.setPoNumber(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDistributorPhone(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTotalAmount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDistributorInvoiceNo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTotalDiscount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPendingAmount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTotalQuantity(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTotalItems(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTotalVat(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsDeleted(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsMemo(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderDate(new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Orders entity, long rowId) {
        return entity.getPoNumber();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Orders entity) {
        if(entity != null) {
            return entity.getPoNumber();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
