package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Customers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMERS".
*/
public class CustomersDao extends AbstractDao<Customers, Long> {

    public static final String TABLENAME = "CUSTOMERS";

    /**
     * Properties of entity Customers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Phone = new Property(0, long.class, "phone", true, "PHONE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property CreditLimit = new Property(4, Integer.class, "creditLimit", false, "CREDIT_LIMIT");
        public final static Property IsDisabled = new Property(5, boolean.class, "isDisabled", false, "IS_DISABLED");
        public final static Property CreatedAt = new Property(6, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(7, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public CustomersDao(DaoConfig config) {
        super(config);
    }
    
    public CustomersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMERS\" (" + //
                "\"PHONE\" INTEGER PRIMARY KEY NOT NULL ," + // 0: phone
                "\"NAME\" TEXT," + // 1: name
                "\"ADDRESS\" TEXT," + // 2: address
                "\"EMAIL\" TEXT," + // 3: email
                "\"CREDIT_LIMIT\" INTEGER," + // 4: creditLimit
                "\"IS_DISABLED\" INTEGER NOT NULL ," + // 5: isDisabled
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 6: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 7: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customers entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhone());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        Integer creditLimit = entity.getCreditLimit();
        if (creditLimit != null) {
            stmt.bindLong(5, creditLimit);
        }
        stmt.bindLong(6, entity.getIsDisabled() ? 1L: 0L);
        stmt.bindLong(7, entity.getCreatedAt().getTime());
        stmt.bindLong(8, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customers readEntity(Cursor cursor, int offset) {
        Customers entity = new Customers( //
            cursor.getLong(offset + 0), // phone
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // creditLimit
            cursor.getShort(offset + 5) != 0, // isDisabled
            new java.util.Date(cursor.getLong(offset + 6)), // createdAt
            new java.util.Date(cursor.getLong(offset + 7)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customers entity, int offset) {
        entity.setPhone(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreditLimit(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsDisabled(cursor.getShort(offset + 5) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customers entity, long rowId) {
        entity.setPhone(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customers entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
