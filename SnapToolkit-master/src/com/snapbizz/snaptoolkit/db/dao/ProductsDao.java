package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.Products;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTS".
*/
public class ProductsDao extends AbstractDao<Products, Long> {

    public static final String TABLENAME = "PRODUCTS";

    /**
     * Properties of entity Products.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductCode = new Property(0, Long.class, "productCode", true, "PRODUCT_CODE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Mrp = new Property(2, int.class, "mrp", false, "MRP");
        public final static Property Uom = new Property(3, String.class, "uom", false, "UOM");
        public final static Property Measure = new Property(4, int.class, "measure", false, "MEASURE");
        public final static Property VatRate = new Property(5, float.class, "vatRate", false, "VAT_RATE");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property IsGdb = new Property(7, boolean.class, "isGdb", false, "IS_GDB");
        public final static Property CreatedAt = new Property(8, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(9, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public ProductsDao(DaoConfig config) {
        super(config);
    }
    
    public ProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTS\" (" + //
                "\"PRODUCT_CODE\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: productCode
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"MRP\" INTEGER NOT NULL ," + // 2: mrp
                "\"UOM\" TEXT NOT NULL ," + // 3: uom
                "\"MEASURE\" INTEGER NOT NULL ," + // 4: measure
                "\"VAT_RATE\" REAL NOT NULL ," + // 5: vatRate
                "\"IMAGE\" TEXT," + // 6: image
                "\"IS_GDB\" INTEGER NOT NULL ," + // 7: isGdb
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 8: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 9: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindLong(1, productCode);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getMrp());
        stmt.bindString(4, entity.getUom());
        stmt.bindLong(5, entity.getMeasure());
        stmt.bindDouble(6, entity.getVatRate());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
        stmt.bindLong(8, entity.getIsGdb() ? 1L: 0L);
        stmt.bindLong(9, entity.getCreatedAt().getTime());
        stmt.bindLong(10, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Products readEntity(Cursor cursor, int offset) {
        Products entity = new Products( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // productCode
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // mrp
            cursor.getString(offset + 3), // uom
            cursor.getInt(offset + 4), // measure
            cursor.getFloat(offset + 5), // vatRate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.getShort(offset + 7) != 0, // isGdb
            new java.util.Date(cursor.getLong(offset + 8)), // createdAt
            new java.util.Date(cursor.getLong(offset + 9)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Products entity, int offset) {
        entity.setProductCode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setMrp(cursor.getInt(offset + 2));
        entity.setUom(cursor.getString(offset + 3));
        entity.setMeasure(cursor.getInt(offset + 4));
        entity.setVatRate(cursor.getFloat(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsGdb(cursor.getShort(offset + 7) != 0);
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Products entity, long rowId) {
        entity.setProductCode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Products entity) {
        if(entity != null) {
            return entity.getProductCode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
