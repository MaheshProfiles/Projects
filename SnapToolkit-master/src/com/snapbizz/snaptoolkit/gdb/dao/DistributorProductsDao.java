package com.snapbizz.snaptoolkit.gdb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.gdb.dao.DistributorProducts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRIBUTOR_PRODUCTS".
*/
public class DistributorProductsDao extends AbstractDao<DistributorProducts, Void> {

    public static final String TABLENAME = "DISTRIBUTOR_PRODUCTS";

    /**
     * Properties of entity DistributorProducts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Phone = new Property(0, long.class, "phone", false, "PHONE");
        public final static Property ProductGid = new Property(1, long.class, "productGid", false, "PRODUCT_GID");
    };


    public DistributorProductsDao(DaoConfig config) {
        super(config);
    }
    
    public DistributorProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRIBUTOR_PRODUCTS\" (" + //
                "\"PHONE\" INTEGER NOT NULL ," + // 0: phone
                "\"PRODUCT_GID\" INTEGER NOT NULL );"); // 1: productGid
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DISTRIBUTOR_PRODUCTS_PHONE_PRODUCT_GID ON DISTRIBUTOR_PRODUCTS" +
                " (\"PHONE\",\"PRODUCT_GID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRIBUTOR_PRODUCTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DistributorProducts entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhone());
        stmt.bindLong(2, entity.getProductGid());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public DistributorProducts readEntity(Cursor cursor, int offset) {
        DistributorProducts entity = new DistributorProducts( //
            cursor.getLong(offset + 0), // phone
            cursor.getLong(offset + 1) // productGid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DistributorProducts entity, int offset) {
        entity.setPhone(cursor.getLong(offset + 0));
        entity.setProductGid(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(DistributorProducts entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(DistributorProducts entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
