package com.snapbizz.snaptoolkit.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.snapbizz.snaptoolkit.db.dao.PurchaseOrders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_ORDERS".
*/
public class PurchaseOrdersDao extends AbstractDao<PurchaseOrders, Long> {

    public static final String TABLENAME = "PURCHASE_ORDERS";

    /**
     * Properties of entity PurchaseOrders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DistributorPhone = new Property(1, long.class, "distributorPhone", false, "DISTRIBUTOR_PHONE");
        public final static Property TotalAmount = new Property(2, int.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property DistributorInvoiceNo = new Property(3, String.class, "distributorInvoiceNo", false, "DISTRIBUTOR_INVOICE_NO");
        public final static Property TotalDiscount = new Property(4, int.class, "totalDiscount", false, "TOTAL_DISCOUNT");
        public final static Property PendingAmount = new Property(5, int.class, "pendingAmount", false, "PENDING_AMOUNT");
        public final static Property TotalQuantity = new Property(6, int.class, "totalQuantity", false, "TOTAL_QUANTITY");
        public final static Property TotalItems = new Property(7, int.class, "totalItems", false, "TOTAL_ITEMS");
        public final static Property TotalVat = new Property(8, int.class, "totalVat", false, "TOTAL_VAT");
        public final static Property IsDeleted = new Property(9, boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property IsMemo = new Property(10, boolean.class, "isMemo", false, "IS_MEMO");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property OrderDate = new Property(12, java.util.Date.class, "orderDate", false, "ORDER_DATE");
        public final static Property CreatedAt = new Property(13, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(14, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };


    public PurchaseOrdersDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseOrdersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_ORDERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISTRIBUTOR_PHONE\" INTEGER NOT NULL ," + // 1: distributorPhone
                "\"TOTAL_AMOUNT\" INTEGER NOT NULL ," + // 2: totalAmount
                "\"DISTRIBUTOR_INVOICE_NO\" TEXT," + // 3: distributorInvoiceNo
                "\"TOTAL_DISCOUNT\" INTEGER NOT NULL ," + // 4: totalDiscount
                "\"PENDING_AMOUNT\" INTEGER NOT NULL ," + // 5: pendingAmount
                "\"TOTAL_QUANTITY\" INTEGER NOT NULL ," + // 6: totalQuantity
                "\"TOTAL_ITEMS\" INTEGER NOT NULL ," + // 7: totalItems
                "\"TOTAL_VAT\" INTEGER NOT NULL ," + // 8: totalVat
                "\"IS_DELETED\" INTEGER NOT NULL ," + // 9: isDeleted
                "\"IS_MEMO\" INTEGER NOT NULL ," + // 10: isMemo
                "\"STATUS\" TEXT NOT NULL ," + // 11: status
                "\"ORDER_DATE\" INTEGER NOT NULL ," + // 12: orderDate
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 13: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL );"); // 14: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_ORDERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PurchaseOrders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDistributorPhone());
        stmt.bindLong(3, entity.getTotalAmount());
 
        String distributorInvoiceNo = entity.getDistributorInvoiceNo();
        if (distributorInvoiceNo != null) {
            stmt.bindString(4, distributorInvoiceNo);
        }
        stmt.bindLong(5, entity.getTotalDiscount());
        stmt.bindLong(6, entity.getPendingAmount());
        stmt.bindLong(7, entity.getTotalQuantity());
        stmt.bindLong(8, entity.getTotalItems());
        stmt.bindLong(9, entity.getTotalVat());
        stmt.bindLong(10, entity.getIsDeleted() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsMemo() ? 1L: 0L);
        stmt.bindString(12, entity.getStatus());
        stmt.bindLong(13, entity.getOrderDate().getTime());
        stmt.bindLong(14, entity.getCreatedAt().getTime());
        stmt.bindLong(15, entity.getUpdatedAt().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PurchaseOrders readEntity(Cursor cursor, int offset) {
        PurchaseOrders entity = new PurchaseOrders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // distributorPhone
            cursor.getInt(offset + 2), // totalAmount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // distributorInvoiceNo
            cursor.getInt(offset + 4), // totalDiscount
            cursor.getInt(offset + 5), // pendingAmount
            cursor.getInt(offset + 6), // totalQuantity
            cursor.getInt(offset + 7), // totalItems
            cursor.getInt(offset + 8), // totalVat
            cursor.getShort(offset + 9) != 0, // isDeleted
            cursor.getShort(offset + 10) != 0, // isMemo
            cursor.getString(offset + 11), // status
            new java.util.Date(cursor.getLong(offset + 12)), // orderDate
            new java.util.Date(cursor.getLong(offset + 13)), // createdAt
            new java.util.Date(cursor.getLong(offset + 14)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PurchaseOrders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistributorPhone(cursor.getLong(offset + 1));
        entity.setTotalAmount(cursor.getInt(offset + 2));
        entity.setDistributorInvoiceNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalDiscount(cursor.getInt(offset + 4));
        entity.setPendingAmount(cursor.getInt(offset + 5));
        entity.setTotalQuantity(cursor.getInt(offset + 6));
        entity.setTotalItems(cursor.getInt(offset + 7));
        entity.setTotalVat(cursor.getInt(offset + 8));
        entity.setIsDeleted(cursor.getShort(offset + 9) != 0);
        entity.setIsMemo(cursor.getShort(offset + 10) != 0);
        entity.setStatus(cursor.getString(offset + 11));
        entity.setOrderDate(new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PurchaseOrders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PurchaseOrders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
